import asyncio
import time
import logging
from collections import deque
from typing import Deque, Tuple, Callable, Dict, Any

logger = logging.getLogger(__name__)

# --- Constantes de Configuração para o Rate Limiter Inteligente ---
WINDOW_SECONDS = 60.0
METRICS_HISTORY_SIZE = 100
TPM_TARGET_FACTOR = 0.90
# Cooldown entre ajustes para evitar oscilações.
ADJUSTMENT_COOLDOWN_SECONDS = 10.0
# Limites de segurança para a concorrência.
MIN_CONCURRENCY = 2
MAX_CONCURRENCY = 1000
# Limiar para evitar ajustes triviais e spam de logs.
MIN_ADJUSTMENT_STEP = 5
# Fator para detectar aumento de latência. Se a latência subir 30%, é um sinal.
LATENCY_INCREASE_FACTOR = 1.3
# --- Parâmetros do Algoritmo AIMD (Additive Increase, Multiplicative Decrease) ---
# Fator para a redução agressiva da concorrência em caso de problemas.
MULTIPLICATIVE_DECREASE_FACTOR = 0.8  # Reduz a concorrência para 80% da atual.
# Aumento gradual e cauteloso da concorrência em tempos de estabilidade.
ADDITIVE_INCREASE_STEP = 5

class AdaptiveRateLimiter:
    """
    Um governador de vazão que utiliza um algoritmo AIMD (Additive Increase,
    Multiplicative Decrease) para gerenciar a concorrência de forma estável,
    considerando tanto o limite de TPM quanto a latência da API.
    """

    def __init__(
        self,
        max_tpm: int,
        stats_callback: Callable[[Dict[str, Any], Any], None],
        initial_concurrency: int
    ):
        if max_tpm <= 0:
            raise ValueError("max_tpm deve ser um valor positivo.")

        self.effective_max_tpm = max_tpm
        self._stats_callback = stats_callback
        self._lock = asyncio.Lock()

        # --- Estado do Controle de Fluxo ---
        self.token_usage_window: Deque[Tuple[float, int]] = deque()
        self.tokens_in_window: int = 0
        self.recent_latencies: Deque[float] = deque(maxlen=METRICS_HISTORY_SIZE)
        self._avg_latency: float = 1.0

        # --- Estado do Controle de Concorrência ---
        self._semaphore = asyncio.Semaphore(initial_concurrency)
        self.dynamic_concurrency = initial_concurrency
        self._is_adjusting_semaphore = False
        self._last_adjustment_time: float = 0.0
        # Flag para garantir que o sistema se estabilize após uma redução.
        self._in_backoff_cooldown = False

        logger.info(
            "AdaptiveRateLimiter (AIMD Governor) inicializado",
            extra={'action': 'rate_limiter_init', 'max_tpm': self.effective_max_tpm,
                   'initial_concurrency': self.dynamic_concurrency}
        )

    def _prune_usage_window(self):
        now = time.time()
        while self.token_usage_window and (now - self.token_usage_window[0][0] > WINDOW_SECONDS):
            _timestamp, tokens = self.token_usage_window.popleft()
            self.tokens_in_window -= tokens

    async def await_permission_to_proceed(self, batch_id: Any = None) -> None:
        await self._semaphore.acquire()
        async with self._lock:
            self._prune_usage_window()
            target_tpm = self.effective_max_tpm * TPM_TARGET_FACTOR
            if self.tokens_in_window >= target_tpm:
                wait_time = (WINDOW_SECONDS - (time.time() - self.token_usage_window[0][0])) if self.token_usage_window else 0
                if wait_time > 0:
                    self._stats_callback({'event_type': 'proactive_pause', 'wait_time': wait_time}, batch_id)
                    await asyncio.sleep(wait_time)

    def record_request_completion(self, tokens_used: int, success: bool, latency: float, batch_id: Any = None):
        try:
            self._semaphore.release()
        except ValueError:
            pass
        asyncio.create_task(self._async_process_result(tokens_used, success, latency, batch_id))

    async def _async_process_result(self, tokens_used: int, success: bool, latency: float, batch_id: Any):
        async with self._lock:
            if success:
                if tokens_used > 0:
                    self.token_usage_window.append((time.time(), tokens_used))
                    self.tokens_in_window += tokens_used
                if latency > 0:
                    self.recent_latencies.append(latency)
                    self._avg_latency = sum(self.recent_latencies) / len(self.recent_latencies)
            self._prune_usage_window()
        
        self._stats_callback({'event_type': 'token_usage_update', 'current_tpm': self.tokens_in_window}, batch_id)
        
        await self._unified_concurrency_strategy(success, latency)

    async def _unified_concurrency_strategy(self, success: bool, current_latency: float):
        """Implementa a lógica AIMD unificada para ajustar a concorrência."""
        now = time.time()
        if self._is_adjusting_semaphore or (now - self._last_adjustment_time < ADJUSTMENT_COOLDOWN_SECONDS):
            return

        # --- Multiplicative Decrease (Ação Rápida) ---
        should_decrease = False
        reason = ""
        if not success:
            should_decrease = True
            reason = "request_failed"
        elif current_latency > self._avg_latency * LATENCY_INCREASE_FACTOR and len(self.recent_latencies) > 10:
            should_decrease = True
            reason = "latency_spike"

        if should_decrease:
            new_concurrency = max(MIN_CONCURRENCY, int(self.dynamic_concurrency * MULTIPLICATIVE_DECREASE_FACTOR))
            if new_concurrency < self.dynamic_concurrency:
                logger.warning(
                    f"Sinal de sobrecarga detectado (motivo: {reason}). "
                    f"Reduzindo concorrência de {self.dynamic_concurrency} para {new_concurrency}.",
                    extra={'action': 'multiplicative_decrease', 'reason': reason}
                )
                await self._set_concurrency(new_concurrency)
                self._in_backoff_cooldown = True # Ativa o cooldown para estabilizar.
            return

        # --- Additive Increase (Ação Lenta) ---
        if self._in_backoff_cooldown:
            if now - self._last_adjustment_time > ADJUSTMENT_COOLDOWN_SECONDS * 2:
                self._in_backoff_cooldown = False
            else:
                return 

        new_concurrency = min(MAX_CONCURRENCY, self.dynamic_concurrency + ADDITIVE_INCREASE_STEP)
        if new_concurrency > self.dynamic_concurrency:
            await self._set_concurrency(new_concurrency)

    async def _set_concurrency(self, new_capacity: int):
        if self._is_adjusting_semaphore: return
        self._is_adjusting_semaphore = True
        try:
            async with self._lock:
                if new_capacity == self.dynamic_concurrency: return
                
                logger.info(
                    f"Ajustando nível de concorrência de {self.dynamic_concurrency} para {new_capacity}",
                    extra={'action': 'concurrency_adjustment', 'old_concurrency': self.dynamic_concurrency, 'new_concurrency': new_capacity}
                )
                
                diff = new_capacity - self.dynamic_concurrency
                if diff > 0:
                    for _ in range(diff): self._semaphore.release()
                elif diff < 0:
                    tasks = [asyncio.create_task(self._semaphore.acquire()) for _ in range(abs(diff))]
                    await asyncio.gather(*tasks)

                self.dynamic_concurrency = new_capacity
                self._last_adjustment_time = time.time()
                self._stats_callback({'event_type': 'concurrency_update', 'new_concurrency': self.dynamic_concurrency}, None)
        finally:
            self._is_adjusting_semaphore = False

    def record_api_rate_limit(self, wait_time: float, batch_id: Any = None):
        asyncio.create_task(self._async_handle_rate_limit_error(wait_time, batch_id))

    async def _async_handle_rate_limit_error(self, wait_time: float, batch_id: Any):
        logger.error(f"RATE LIMIT DA API DETECTADO! Reduzindo concorrência e pausando por {wait_time:.1f}s.")
        new_concurrency = max(MIN_CONCURRENCY, int(self.dynamic_concurrency * MULTIPLICATIVE_DECREASE_FACTOR))
        await self._set_concurrency(new_concurrency)
        self._in_backoff_cooldown = True
        self._stats_callback({'event_type': 'api_rate_limit_detected', 'wait_time': wait_time}, batch_id)
