import asyncio
import time
import logging
from collections import deque
from typing import Deque, Tuple, Callable, Dict, Any, Optional

logger = logging.getLogger(__name__)

# --- Constantes de Configuração para o Rate Limiter Avançado ---
WINDOW_SECONDS = 60.0
METRICS_HISTORY_SIZE = 150
TPM_TARGET_FACTOR = 0.90
ADJUSTMENT_COOLDOWN_SECONDS = 5.0
MIN_CONCURRENCY = 10
MAX_CONCURRENCY = 1000

# --- Parâmetros do Algoritmo de Controle de Gradiente Aprimorado ---
MULTIPLICATIVE_INCREASE_FACTOR = 1.2
ADDITIVE_INCREASE_STEP = 10
MULTIPLICATIVE_DECREASE_FACTOR = 0.75
PERFORMANCE_CHANGE_THRESHOLD = 0.15

# --- Constantes de Controle de Lógica ---
# Número de requisições a aguardar antes de avaliar sobrecargas
WARMUP_REQUESTS_COUNT = 50
# Intervalo mínimo entre logs de ajuste para evitar spam
LOGGING_COOLDOWN_SECONDS = 10.0


class AdaptiveRateLimiter:
    """
    Um governador de vazão que utiliza um algoritmo de controle de gradiente aprimorado
    para otimizar a concorrência de forma mais estável e inteligente.
    """

    def __init__(
        self,
        max_tpm: int,
        stats_callback: Callable[[Dict[str, Any], Any], None],
        initial_concurrency: int,
    ):
        if max_tpm <= 0:
            raise ValueError("max_tpm deve ser um valor positivo.")

        self.effective_max_tpm = max_tpm
        self._stats_callback = stats_callback
        self._lock = asyncio.Lock()

        # --- Estado do Controle de Fluxo e Performance ---
        self.token_usage_window: Deque[Tuple[float, int]] = deque()
        self.tokens_in_window: int = 0
        self.request_completion_times: Deque[float] = deque(maxlen=METRICS_HISTORY_SIZE)
        self.recent_latencies: Deque[float] = deque(maxlen=METRICS_HISTORY_SIZE)

        self._avg_latency: float = 1.0
        self._avg_throughput: float = 0.0
        self._requests_counted_since_init: int = 0

        # --- Estado do Controle de Concorrência ---
        self._semaphore = asyncio.Semaphore(initial_concurrency)
        self.dynamic_concurrency = initial_concurrency
        self._is_adjusting_semaphore = False
        self._last_adjustment_time: float = 0.0
        self._last_log_time: float = 0.0
        self._in_backoff_cooldown = False

        logger.info(
            "AdaptiveRateLimiter (Intelligent Governor) inicializado",
            extra={
                "action": "rate_limiter_init",
                "max_tpm": self.effective_max_tpm,
                "initial_concurrency": self.dynamic_concurrency,
            },
        )

    def _update_performance_metrics(self):
        """Calcula a latência e a vazão médias com base no histórico recente."""
        if self.recent_latencies:
            self._avg_latency = sum(self.recent_latencies) / len(self.recent_latencies)

        now = time.time()
        recent_completions = [t for t in self.request_completion_times if now - t <= 10.0]
        if recent_completions:
            time_window = max(1.0, 10.0 if len(recent_completions) > 1 else 1.0)
            self._avg_throughput = len(recent_completions) / time_window
        else:
            self._avg_throughput = 0.0

    async def await_permission_to_proceed(self, batch_id: Any = None) -> None:
        """Adquire permissão do semáforo e verifica os limites de TPM."""
        await self._semaphore.acquire()
        async with self._lock:
            now = time.time()
            # Limpa tokens antigos da janela de observação
            while self.token_usage_window and (now - self.token_usage_window[0][0] > WINDOW_SECONDS):
                timestamp, tokens = self.token_usage_window.popleft()
                self.tokens_in_window -= tokens

            target_tpm = self.effective_max_tpm * TPM_TARGET_FACTOR
            if self.tokens_in_window >= target_tpm:
                wait_time = (WINDOW_SECONDS - (now - self.token_usage_window[0][0])) if self.token_usage_window else 0.0
                if wait_time > 0:
                    self._maybe_log(f"Limite de TPM proativo atingido. Pausando por {wait_time:.2f}s.", level="warning")
                    self._stats_callback({"event_type": "proactive_pause", "wait_time": wait_time}, batch_id)
                    await asyncio.sleep(wait_time)

    def record_request_completion(self, tokens_used: int, success: bool, latency: float, batch_id: Any = None, remaining_tasks: Optional[int] = None):
        """Libera o semáforo de forma segura e agenda o processamento do resultado."""
        try:
            self._semaphore.release()
        except ValueError:
            pass
        asyncio.create_task(self._async_process_result(tokens_used, success, latency, batch_id, remaining_tasks))

    async def _async_process_result(self, tokens_used: int, success: bool, latency: float, batch_id: Any, remaining_tasks: Optional[int]):
        """Processa o resultado de uma requisição e aciona a estratégia de ajuste."""
        previous_avg_latency = self._avg_latency
        previous_avg_throughput = self._avg_throughput

        async with self._lock:
            if success:
                now = time.time()
                self.token_usage_window.append((now, tokens_used))
                self.tokens_in_window += tokens_used
                self.request_completion_times.append(now)
                self.recent_latencies.append(latency)
            self._requests_counted_since_init += 1
            self._update_performance_metrics()

        self._stats_callback({"event_type": "token_usage_update", "current_tpm": self.tokens_in_window}, batch_id)
        await self._gradient_concurrency_strategy(success, previous_avg_latency, previous_avg_throughput, remaining_tasks)

    async def _gradient_concurrency_strategy(self, success: bool, prev_latency: float, prev_throughput: float, remaining_tasks: Optional[int]):
        """Ajusta a concorrência com base em uma análise mais robusta da performance."""
        now = time.time()
        if self._is_adjusting_semaphore or (now - self._last_adjustment_time < ADJUSTMENT_COOLDOWN_SECONDS):
            return

        # 1. PERÍODO DE AQUECIMENTO: Ignora sinais de sobrecarga no início do lote.
        if self._requests_counted_since_init < WARMUP_REQUESTS_COUNT:
            return

        latency_change = (self._avg_latency - prev_latency) / prev_latency if prev_latency > 0 else 0
        
        # 2. CONDIÇÃO DE REDUÇÃO (SOBRECARGA): Reduz se a latência aumentou desproporcionalmente.
        is_overloaded = not success or (latency_change > PERFORMANCE_CHANGE_THRESHOLD)
        if is_overloaded:
            new_concurrency = max(MIN_CONCURRENCY, int(self.dynamic_concurrency * MULTIPLICATIVE_DECREASE_FACTOR))
            if new_concurrency < self.dynamic_concurrency:
                self._maybe_log(f"Sinal de sobrecarga (latência: {latency_change:+.1%}). Reduzindo concorrência para {new_concurrency}.", level="warning")
                await self._set_concurrency(new_concurrency)
                self._in_backoff_cooldown = True
            return

        # Durante o cooldown pós-redução, não aumenta a concorrência para estabilizar.
        if self._in_backoff_cooldown:
            if (now - self._last_adjustment_time) > (ADJUSTMENT_COOLDOWN_SECONDS * 2):
                self._in_backoff_cooldown = False
            else:
                return

        # 3. AFUNILAMENTO NO FIM DO LOTE: Limita a concorrência ao trabalho restante.
        if remaining_tasks is not None:
            # Adiciona um pequeno buffer para não limitar agressivamente demais
            target_concurrency = max(MIN_CONCURRENCY, remaining_tasks + 5)
            if self.dynamic_concurrency > target_concurrency:
                self._maybe_log(f"Fim de lote detectado. Afunilando concorrência para {target_concurrency}.")
                await self._set_concurrency(target_concurrency)
                return

        # 4. CONDIÇÃO DE AUMENTO (SISTEMA SAUDÁVEL): Aumenta se a latência estiver estável ou melhorando.
        if latency_change <= 0.0:  # Aumenta agressivamente se a latência cai ou fica igual
            new_concurrency = min(MAX_CONCURRENCY, int(self.dynamic_concurrency * MULTIPLICATIVE_INCREASE_FACTOR) + 1)
        else:  # Aumenta de forma conservadora se a latência sobe, mas sem sobrecarga.
            new_concurrency = min(MAX_CONCURRENCY, self.dynamic_concurrency + ADDITIVE_INCREASE_STEP)

        if new_concurrency > self.dynamic_concurrency:
            await self._set_concurrency(new_concurrency)

    async def _set_concurrency(self, new_capacity: int):
        """Ajusta o tamanho do semáforo de forma segura."""
        if self._is_adjusting_semaphore: return
        self._is_adjusting_semaphore = True
        try:
            current_concurrency = self.dynamic_concurrency
            if new_capacity == current_concurrency: return
            
            self._maybe_log(f"Ajustando nível de concorrência: {current_concurrency} -> {new_capacity}")

            diff = new_capacity - current_concurrency
            if diff > 0:
                for _ in range(diff): self._semaphore.release()
            elif diff < 0:
                tasks = [asyncio.create_task(self._semaphore.acquire()) for _ in range(abs(diff))]
                await asyncio.gather(*tasks)

            self.dynamic_concurrency = new_capacity
            self._last_adjustment_time = time.time()
            self._stats_callback({"event_type": "concurrency_update", "new_concurrency": new_capacity}, None)
        finally:
            self._is_adjusting_semaphore = False

    def _maybe_log(self, message: str, level: str = "info"):
        """Registra uma mensagem apenas se o cooldown de logging tiver passado."""
        now = time.time()
        if (now - self._last_log_time) > LOGGING_COOLDOWN_SECONDS:
            if hasattr(logger, level):
                getattr(logger, level)(message)
            else:
                logger.info(message)
            self._last_log_time = now

    def record_api_rate_limit(self, wait_time: float, batch_id: Any = None):
        """Reage a um erro de rate limit explícito da API."""
        asyncio.create_task(self._async_handle_rate_limit_error(wait_time, batch_id))

    async def _async_handle_rate_limit_error(self, wait_time: float, batch_id: Any):
        """Reduz a concorrência agressivamente em resposta a um erro 429 da API."""
        logger.error(f"RATE LIMIT EXPLÍCITO DA API! Reduzindo concorrência e pausando por {wait_time:.1f}s.")
        new_concurrency = max(MIN_CONCURRENCY, int(self.dynamic_concurrency * MULTIPLICATIVE_DECREASE_FACTOR))
        await self._set_concurrency(new_concurrency)
        self._in_backoff_cooldown = True
        self._stats_callback({"event_type": "api_rate_limit_detected", "wait_time": wait_time}, batch_id)
